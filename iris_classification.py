# -*- coding: utf-8 -*-
"""Iris Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RnoSY8lRoKOV3jCbibg8s1VbV8AW1AeX
"""

import pandas as pd
import numpy as np

data=pd.read_csv("Iris.csv")
data
data.head()

data.shape

data.columns

data.describe()

del data["Id"]
data

data.info()

data["Species"].unique()

data["Species"].value_counts()

data.isnull().sum()

"""PREPROCESSING THE DATA"""

data.isnull().sum()

"""DATA ANALYSIS"""

import os
import matplotlib.pyplot as plt
import seaborn as sns

data["SepalLengthCm"].hist()

data["SepalWidthCm"].hist()

data["PetalLengthCm"].hist()

data["PetalWidthCm"].hist()

colors =["red", "yellow","blue"]
species=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']

for i in range(3):
    x=data[data["Species"] == species[i]]
    plt.scatter(x["SepalLengthCm"],x["SepalWidthCm"],c=colors[i],label=species[i])

plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()

for i in range(3):
    x=data[data["Species"] == species[i]]
    plt.scatter(x["PetalLengthCm"],x["PetalWidthCm"],c=colors[i],label=species[i])

plt.xlabel("Petal Length")
plt.ylabel("Petal Width")
plt.legend()

for i in range(3):
    x=data[data["Species"] == species[i]]
    plt.scatter(x["SepalLengthCm"],x["PetalLengthCm"],c=colors[i],label=species[i])

plt.xlabel("Sepal Length")
plt.ylabel("Petal Length")
plt.legend()

for i in range(3):
    x=data[data["Species"] == species[i]]
    plt.scatter(x["SepalWidthCm"],x["PetalWidthCm"],c=colors[i],label=species[i])

plt.xlabel("Sepal Width")
plt.ylabel("Petal Width")
plt.legend()

data.corr()

corr = data.corr()
fig,ax=plt.subplots(figsize=(4,4))
sns.heatmap(corr,annot=True,ax=ax,cmap="coolwarm")

"""MODEL TRAINING"""

import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split

X=data.drop(columns=["Species"])
Y=data["Species"]
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.30)

# logistic regression
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

# model training
model.fit(x_train,y_train)

print("accuracy: ",model.score(x_test,y_test)*100)

# k nearest neighbours
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(x_train,y_train)

print("accuracy: ",model.score(x_test,y_test)*100)

# decision tree
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

model.fit(x_train,y_train)

print("accuracy: ",model.score(x_test,y_test)*100)